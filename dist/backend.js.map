{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/external \"require3\"","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/validation.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/config/middleware/validation.js","webpack://backend/./backend/src/config/middleware/adapter/validation.js","webpack://backend/./backend/src/config/middleware/validate.js","webpack://backend/./backend/src/config/constants.js","webpack://backend/./backend/src/ajv/ajv.js","webpack://backend/./backend/src/ajv/keywords.js","webpack://backend/./backend/src/ajv/keyword/notEmpty.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/config/validation/schemas.js","webpack://backend/./backend/src/config/validation/keywords.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/validation.js","webpack://backend/./backend/src/controller/test.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;AClFA,qC;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC/BA;;AAEA;AACA;AACA;;;;;;;ACJA;;AAEA;;AAEA,YAAY,4BAA4B;AACxC,iDAAiD,4BAA4B;AAC7E;;AAEA;;AAEA;AACA;;;;;;;ACXA;AACA;;;;;;;ACDA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;AChBA;AACA;AACA;;;;;;;ACFA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;;;;;;;ACFA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;ACNA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;;;;;;;AClBA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAe,4BAA4B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,kCAAkC;AACtD,+CAA+C,oBAAoB;AACnE,0CAA0C,oBAAoB;AAC9D;AACA;;AAEA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,oGAAoG;AACpJ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;ACtBA;AACA;;;;;;;ACDA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,yCAAyC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,yBAAyB,oBAAoB;AAC7C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3DA;;AAEA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAmE;AAC1F;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC,eAAe,4BAA4B;AAC3C;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;ACnEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAA8E;AAC3G;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;;;;;;ACxBA;AACA;;AAEA;AACA;AACA,KAAK,oEAAoE;AACzE;AACA;AACA;AACA,OAAO,yFAAyF;AAChG,OAAO;AACP,eAAe,YAAY,oBAAoB,EAAE,EAAE;AACnD;AACA;AACA;AACA;;;;;;;ACfA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACVA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"require3\");","const services = require('./services.js');\nconst models = require('./models.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\nconst constants = require('./config/constants.js');\nconst ajv = require('./ajv/ajv.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n\n  // meta\n  const meta = require('./meta.js')(app);\n  const routes = require('./routes.js')(app);\n\n  // ajv\n  app.meta.ajv = ajv;\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    constants,\n    meta,\n  };\n\n};\n","const validation = require('./service/validation.js');\n\nmodule.exports = {\n  validation,\n};\n","module.exports = app => {\n\n  class Validation extends app.Service {\n\n    schema({ module, validator, schema }) {\n      return this.ctx.meta.validation.getSchema({ module, validator, schema });\n    }\n\n  }\n\n  return Validation;\n};\n","module.exports = {\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {\n    validation: {\n      global: true,\n      dependencies: 'instance',\n    },\n    validate: {\n      global: false,\n    },\n  };\n\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  test: '测试',\n  'Not empty': '不允许为空',\n  'Not expected value': '不是期望的值',\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","const validation = require('./middleware/validation.js');\nconst validate = require('./middleware/validate.js');\n\nmodule.exports = {\n  validation,\n  validate,\n};\n","// validation\nconst ValidationFn = require('./adapter/validation.js');\nconst VALIDATION = Symbol('CTX#__VALIDATION');\n\nmodule.exports = (options, app) => {\n  return async function validation(ctx, next) {\n    ctx.meta = ctx.meta || {};\n    Object.defineProperty(ctx.meta, 'validation', {\n      get() {\n        if (ctx.meta[VALIDATION] === undefined) {\n          ctx.meta[VALIDATION] = new (ValidationFn(ctx))();\n        }\n        return ctx.meta[VALIDATION];\n      },\n    });\n    // next\n    await next();\n  };\n};\n","const Fn = module.exports = ctx => {\n  class Validation {\n\n    constructor(moduleName) {\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    // other module's validation\n    module(moduleName) {\n      return new (Fn(ctx))(moduleName);\n    }\n\n    getSchema({ module, validator, schema }) {\n      module = module || this.moduleName;\n      const meta = ctx.app.meta.modules[module].main.meta;\n      if (!schema) {\n        const schemas = this._adjustSchemas(meta.validation.validators[validator].schemas);\n        schema = schemas[0];\n      }\n      return meta.validation.schemas[schema];\n    }\n\n    async validate({ module, validator, schema, data }) {\n      const _validator = this._checkValidator({ module, validator });\n      const res = await _validator.ajv.v({ ctx, schema, data });\n      return res;\n    }\n\n    _checkValidator({ module, validator }) {\n      module = module || this.moduleName;\n      const meta = ctx.app.meta.modules[module].main.meta;\n      const _validator = meta.validation.validators[validator];\n      if (_validator.ajv) return _validator;\n      // create ajv\n      const _schemas = this._adjustSchemas(_validator.schemas);\n      const schemas = {};\n      for (const _schema of _schemas) {\n        schemas[_schema] = meta.validation.schemas[_schema];\n        schemas[_schema].$async = true;\n      }\n      _validator.ajv = ctx.app.meta.ajv.create({ options: _validator.options, keywords: meta.validation.keywords, schemas, schemaRoot: _schemas[0] });\n      return _validator;\n    }\n\n    _adjustSchemas(schemas) {\n      if (typeof schemas === 'string') return schemas.split(',');\n      return schemas;\n    }\n\n  }\n\n  return Validation;\n};\n","// request.body\n//   validate: module(optional), validator, schema(optional)\n//   data:\nmodule.exports = (options, app) => {\n  return async function validate(ctx, next) {\n    // ignore\n    const validator = options.validator || (ctx.request.body.validate && ctx.request.body.validate.validator);\n    if (!validator) return await next();\n    // params\n    const module = options.module || (ctx.request.body.validate && ctx.request.body.validate.module) || ctx.module.info.relativeName;\n    const schema = options.schema || (ctx.request.body.validate && ctx.request.body.validate.schema);\n    const data = ctx.request.body[options.data || 'data'];\n    // if error throw 422\n    await ctx.meta.validation.validate({\n      module,\n      validator,\n      schema,\n      data,\n    });\n    // next\n    await next();\n  };\n};\n","module.exports = {\n};\n","const require3 = require('require3');\nconst Ajv = require3('ajv');\nconst AjvLocalize = require3('ajv-i18n');\nconst AjvKeywords = require3('ajv-keywords');\nconst systemKeywords = require('./keywords.js');\n\nmodule.exports = {\n  create({ options, keywords, schemas, schemaRoot }) {\n    const _options = Object.assign({\n      $data: true,\n      allErrors: true,\n      verbose: false,\n      jsonPointers: true,\n      format: 'full',\n      unknownFormats: true,\n      useDefaults: true,\n      coerceTypes: true,\n      transpile: false,\n      passContext: true,\n      removeAdditional: 'all',\n    }, options);\n    const ajv = new Ajv(_options);\n    AjvKeywords(ajv);\n    ajv.v = createValidate(schemaRoot);\n    // systemKeywords\n    for (const _keyword in systemKeywords) {\n      ajv.addKeyword(_keyword, systemKeywords[_keyword]);\n    }\n    // keywords\n    if (keywords) {\n      for (const _keyword in keywords) {\n        ajv.addKeyword(_keyword, keywords[_keyword]);\n      }\n    }\n    // schemas\n    if (schemas) {\n      for (const key in schemas) {\n        ajv.addSchema(schemas[key], key);\n      }\n    }\n    return ajv;\n  },\n};\n\nfunction createValidate(schemaRoot) {\n  return async function({ ctx, schema, data }) {\n    const validate = this.getSchema(schema || schemaRoot);\n    try {\n      const res = await validate.call(ctx, data);\n      return res;\n    } catch (e) {\n      const locale = ctx.locale.split('-')[0];\n      if (locale !== 'en' && AjvLocalize[locale]) AjvLocalize[locale](e.errors);\n      const error = new Error();\n      error.code = 422;\n      error.message = e.errors;\n      throw error;\n    }\n  };\n}\n","const notEmpty = require('./keyword/notEmpty.js');\n\nmodule.exports = {\n  notEmpty,\n};\n","module.exports = {\n  errors: true,\n  compile(schema) {\n    const fun = function(data) {\n      const res = schema ? !!data : !data;\n      if (!res) {\n        fun.errors = [{ keyword: 'notEmpty', params: [], message: this.text('Not empty') }];\n      }\n      return res;\n    };\n    return fun;\n  },\n};\n","module.exports = app => {\n  const meta = {};\n  if (app.meta.isTest || app.meta.isLocal) {\n    // schemas\n    const schemas = require('./config/validation/schemas.js')(app);\n    // keywords\n    const keywords = require('./config/validation/keywords.js')(app);\n    // meta\n    Object.assign(meta, {\n      validation: {\n        validators: {\n          test: {\n            schemas: 'root,extra',\n          },\n        },\n        keywords: {\n          'x-languages': keywords.languages,\n        },\n        schemas: {\n          root: schemas.root,\n          extra: schemas.extra,\n        },\n      },\n    });\n  }\n  return meta;\n};\n","module.exports = app => {\n  const schemas = {};\n  schemas.root = {\n    type: 'object',\n    ebTitle: 'test',\n    properties: {\n      info: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        properties: {\n          username: {\n            type: 'string',\n            ebType: 'text',\n            ebTitle: 'User Name',\n            ebDescription: 'Your name',\n          },\n          password: {\n            type: 'string',\n            ebType: 'text',\n            ebSecure: true,\n          },\n          sex: {\n            type: 'number',\n            ebType: 'select',\n            ebOptions: [\n              { title: 'Male', value: 1 },\n              { title: 'Female', value: 2 },\n            ],\n          },\n        },\n      },\n      extra: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Extra Group',\n        properties: {\n          extra: {\n            ebType: 'panel',\n            $ref: 'extra',\n          },\n        },\n      },\n    },\n  };\n  schemas.extra = {\n    type: 'object',\n    ebTitle: 'extra',\n    properties: {\n      info: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        properties: {\n          language: {\n            type: 'string',\n            ebType: 'select',\n            ebOptionsUrl: 'test/languages',\n            notEmpty: true,\n            'x-languages': true,\n          },\n        },\n        required: [ 'language' ],\n      },\n    },\n  };\n  return schemas;\n};\n","const require3 = require('require3');\nconst Ajv = require3('ajv');\n\nmodule.exports = app => {\n  const keywords = {};\n  keywords.languages = {\n    async: true,\n    type: 'string',\n    errors: true,\n    compile() {\n      return async function(data) {\n        const ctx = this;\n        return new Promise((resolve, reject) => {\n          const res = [ 'zh-cn', 'en-us' ].indexOf(data) > -1;\n          if (!res) {\n            const errors = [{ keyword: 'x-languages', params: [], message: ctx.text('Not expected value') }];\n            return reject(new Ajv.ValidationError(errors));\n          }\n          return resolve(res);\n        });\n      };\n    },\n  };\n  return keywords;\n};\n","const validation = require('./controller/validation.js');\nconst test = require('./controller/test.js');\n\nmodule.exports = app => {\n  let routes = [\n    { method: 'post', path: 'validation/schema', controller: validation },\n  ];\n  if (app.meta.isTest || app.meta.isLocal) {\n    routes = routes.concat([\n      { method: 'post', path: 'test/validate1', controller: test, middlewares: 'test,validate' },\n      { method: 'post', path: 'test/validate2', controller: test, middlewares: 'test,validate',\n        meta: { validate: { validator: 'test' } } },\n    ]);\n  }\n  return routes;\n};\n","module.exports = app => {\n  class ValidationController extends app.Controller {\n\n    schema() {\n      const res = this.service.validation.schema(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n  }\n  return ValidationController;\n};\n","module.exports = app => {\n  class TestController extends app.Controller {\n\n    async validate1() {\n      this.ctx.success();\n    }\n\n    async validate2() {\n      this.ctx.success();\n    }\n\n  }\n  return TestController;\n};\n\n"],"sourceRoot":""}